from imports.imports import *
import database.sql_commands
import parser.edu_login


def get_marks(username: str) -> str:
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ü–µ–Ω–æ–∫ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥. –í–æ–∑—Ä–∞—â–∞–µ—Ç False, –µ—Å–ª–∏ –æ—Ü–µ–Ω–æ–∫ –Ω–µ—Ç"""
    update_marks(username)
    marks = database.sql_commands.get_marks(username)
    if not marks:
        return '–û—Ü–µ–Ω–æ–∫ –Ω–µ—Ç'
    ret = ''
    for mark in marks:
        ret += str(mark[0]).capitalize()
        if mark[2]:
            ret += ":\n" + str(mark[1]) + "\n–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: " + str(mark[2])
        if mark[3]:
            ret += "\n–û—Ü–µ–Ω–∫–∞ –∑–∞ —á–µ—Ç–≤–µ—Ä—Ç—å(–ø–æ–ª—É–≥–æ–¥–∏–µ): " + str(mark[3])
        ret += '\n\n'
    return ret.strip()


def get_new_marks(username: str):
    marks = update_marks(username)
    if marks is False:  # –û—à–∏–±–∫–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
        return False
    if not marks:  # –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ—Ü–µ–Ω–∫–∞—Ö
        return True
    ret = get_difference(marks)
    return ret


def update_marks(username: str):
    marks = get_marks_of_changed_objects(username)
    if type(marks) is bool:
        return marks
    for object_ in marks:
        database.sql_commands.add_marks(username, object_,
                                        ' '.join(marks[object_]['new_marks']),
                                        marks[object_]['new_medium'],
                                        marks[object_]['new_mark_of_quarter'])
    return marks


def get_marks_of_changed_objects(username: str) -> dict | bool:
    """Returns:
    {
        "object":
            {
                "old_marks": [...],
                "new_marks": [...],
                "old_mark_of_quarter": float,
                "new_mark_of_quarter": float,
                "old_medium": float,
                "new_medium": float
            }
    }"""
    user = database.sql_commands.get_login_password(username)
    if not user:
        return False
    login, password = tuple(user)
    marks = get_marks_from_site(login, password)
    if not marks:
        database.sql_commands.update_column_can(username, 0)
        return False
    database.sql_commands.update_column_can(username, 1)
    dictionary = dict()
    for marks_of_object in marks['objects']:
        object_ = marks_of_object['object']
        f = database.sql_commands.get_marks_by_object(username, object_)
        if not f:  # –ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            old_marks = []
            old_medium = 0
            old_mark_of_quarter = None
        else:
            old_marks = str(f[0][2]).split()
            old_medium = f[0][3]
            old_mark_of_quarter = f[0][4]
        if (old_marks != marks_of_object['marks'] or
                (old_mark_of_quarter != marks_of_object['mark_of_quarter'] and
                 bool(old_mark_of_quarter) != bool(marks_of_object['mark_of_quarter']))):
            dictionary[object_] = {
                'old_marks': old_marks,
                'new_marks': marks_of_object['marks'],
                'old_mark_of_quarter': old_mark_of_quarter,
                'new_mark_of_quarter': marks_of_object['mark_of_quarter'],
                'old_medium': old_medium,
                'new_medium': marks_of_object['medium']
            }
    return dictionary


def get_marks_from_site(login: str, password: str) -> dict:
    """
    :return:
        {
            "objects":
                [
                    {
                        "object": str
                        "marks": [...],
                        "mark_of_quarter": float,
                        "medium": float
                    },
                    ...
                ]
            "medium_for_rating": float
        }"""
    res = parser.edu_login.check(login, password)
    if not res:
        return dict()
    res = res.get("https://edu.tatar.ru/user/diary/term", timeout=120).text
    res = res.replace('&mdash;', '')
    html = BS(res, 'html.parser')
    count = len(html.select('#content > div.r_block > div > div > div > table > tbody > tr'))

    dictionary = dict()
    dictionary['objects'] = list()
    dictionary['medium_for_rating'] = 0
    for i in range(count):
        marks = html.select(f'#content > div.r_block > div > div > div > table > tbody > tr:nth-child({i + 1}) > td')
        if i == count - 1:
            # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ —Ç–∞–±–ª–∏—Ü—ã(—Å—Ç—Ä–æ–∫–∞ –∏—Ç–æ–≥–æ: —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –≤—Å–µ—Ö —Å—Ä–µ–¥–Ω–∏—Ö –±–∞–ª–ª–æ–≤)
            dictionary['medium_for_rating'] = str(marks[1]).replace('<td>', '').replace('</td>', '')
            continue
        marks = list(map(str, marks))
        marks = list(map(lambda x: x.replace('<td>', '').replace('</td>', ''), marks))
        marks = list(map(lambda x: x.strip(), marks))
        marks.pop(-2)  # –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É "–ø—Ä–æ—Å–º–æ—Ç—Ä"

        object_ = marks.pop(0)
        object_ = " ".join(object_.split())  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏

        mark_of_quarter = marks.pop(-1)
        medium = marks.pop(-1)
        marks = list(filter(None, marks))
        dictionary['objects'] += [{
            'object': object_,
            'marks': marks,
            'medium': float(medium) if medium else 0,
            'mark_of_quarter': mark_of_quarter
        }]
    return dictionary


def get_difference(dic: dict) -> str:
    """–°–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á - –ø—Ä–µ–¥–º–µ—Ç, –∑–Ω–∞—á–µ–Ω–∏–µ - –∫–æ—Ä—Ç–µ–∂ –∏–∑ —Å—Ç–∞—Ä—ã—Ö –∏ –∫–æ—Ä—Ç–µ–∂ –∏–∑ –Ω–æ–≤—ã—Ö –æ—Ü–µ–Ω–æ–∫,
    —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞ –∏ –Ω–æ–≤–æ–µ"""
    ret = ''
    for key in dic:
        a = ''.join(dic[key]['old_marks'])
        b = ''.join(dic[key]['new_marks'])
        data = difference_of_marks(a, b)
        ret += key + '\n'
        if data != [[], [], []]:  # –ï—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ—Ü–µ–Ω–∫–∞—Ö
            # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É(–ø—É—Å—Ç—É—é), –µ—Å–ª–∏ –Ω–∏ –æ–¥–Ω—É –æ—Ü–µ–Ω–∫—É –Ω–µ –º–µ–Ω—è–ª–∏ –Ω–∞ –¥—Ä—É–≥—É—é
            if not "".join(data[0]).strip():
                data = data[1:]
            old_medium = dic[key]['old_medium']
            new_medium = dic[key]['new_medium']
            if old_medium <= new_medium:
                sim = 'üìà'
            else:
                sim = 'üìâ'
            ret += '```\n' + "\n".join(list(map(lambda x: " ".join(x), data))) + \
                   f'\n```–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {old_medium}{sim}{new_medium}\n'
        # –ò–∑–º–µ–Ω–∏–ª–∞—Å—å –æ—Ü–µ–Ω–∫–∞ –∑–∞ —á–µ—Ç–≤–µ—Ä—Ç—å
        if dic[key]['old_mark_of_quarter'] != dic[key]['new_mark_of_quarter'] and\
                bool(dic[key]['old_mark_of_quarter']) != bool(dic[key]['new_mark_of_quarter']):
            ret += '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –∑–∞ —á–µ—Ç–≤–µ—Ä—Ç—å(–ø–æ–ª—É–≥–æ–¥–∏–µ): '
            if not dic[key]['new_mark_of_quarter']:
                ret += f'–£–±—Ä–∞–Ω–∞ {dic[key]["old_mark_of_quarter"]}'
            else:
                if dic[key]['old_mark_of_quarter']:
                    ret += dic[key]['old_mark_of_quarter'] + ' -> '
                else:
                    ret += '–í—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ '
                ret += dic[key]['new_mark_of_quarter']
            ret += '\n'
        ret += '\n'
    return ret.rstrip()


def difference_of_marks(a: str, b: str) -> list:
    """
    :param a: –°—Ç–∞—Ä—ã–µ –æ—Ü–µ–Ω–∫–∏(—Ç–∏–ø–∞ - '4534')
    :param b: –ù–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏(—Ç–∏–ø–∞ - '4534')
    :return: [[], [], []]
    """
    n = len(a)
    m = len(b)
    f = []
    # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–≤—É—Ö —Å—Ç—Ä–æ–∫ —Å –æ—Ü–µ–Ω–∫–∞–º–∏
    for i in range(n + 1):
        f += [[-1] * (m + 1)]
    for i in range(n + 1):
        f[i][0] = i
    for j in range(m + 1):
        f[0][j] = j
    for i in range(1, n + 1):
        for j in range(1, m + 1):
            c = int(a[i - 1] != b[j - 1])
            f[i][j] = min(f[i - 1][j] + 1, f[i][j - 1] + 1, f[i - 1][j - 1] + c)

    ret1 = []
    ret2 = []
    ret3 = []
    i = n
    j = m
    # –û–±—Ä–∞—Ç–Ω—ã–π –ø—Ä–æ—Ö–æ–¥ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–≤—É—Ö —Å—Ç—Ä–æ–∫ —Å –æ—Ü–µ–Ω–∫–∞–º–∏
    while f[i][j] != 0:
        mn = f[i][j] + 1
        mnst = ''
        if i != 0:
            if mn > f[i - 1][j]:
                mn = f[i - 1][j]
                mnst = 'i'
        if j != 0:
            if mn > f[i][j - 1]:
                mn = f[i][j - 1]
                mnst = 'j'
        if i != 0 and j != 0:
            if mn >= f[i - 1][j - 1]:
                mn = f[i - 1][j - 1]
                mnst = 'ij'
        if 'ij' == mnst:
            i -= 1
            j -= 1
            if mn == f[i + 1][j + 1]:
                ret1 += [' ']
                ret2 += [' ']
                ret3 += [str(a[i])]
            else:
                ret1 += [str(a[i])]
                ret2 += ['‚áì']
                ret3 += [str(b[j])]
        elif 'i' == mnst:
            i -= 1
            ret1 += [' ']
            ret2 += ['-']
            ret3 += [str(a[i])]
        elif 'j' == mnst:
            j -= 1
            ret1 += [' ']
            ret2 += ['+']
            ret3 += [str(b[j])]
    ret = [ret1[::-1], ret2[::-1], ret3[::-1]]
    return ret
